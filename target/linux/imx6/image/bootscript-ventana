echo "Gateworks Ventana OpenWrt Boot script v1.03"

# set some defaults
# set some defaults
test -n "$fs"    || fs=ext2
test -n "$disk"  || disk=0
setenv nextcon 0
setenv bootargs console=${console},${baudrate}
setenv loadaddr 10800000
setenv fdt_addr 18000000

# detect dtype by looking for kernel on media the bootloader
# has mounted (in order of preference: usb/mmc/sata)
#
# This assumes the bootloader has already started the respective subsystem
# or mounted the filesystem if appropriate to get to this bootscript
#
# To Speed up boot set dtype manually
if test -n "$dtype" ; then
	echo "Using dtype from env: $dtype"
else
	echo "Detecting boot device (dtype)..."
	if ${fs}load usb ${disk}:1 ${loadaddr} ${bootdir}/uImage ; then
		dtype=usb
	elif ${fs}load mmc ${disk}:1 ${loadaddr} ${bootdir}/uImage ; then
		dtype=mmc
	elif ${fs}load sata ${disk}:1 ${loadaddr} ${bootdir}/uImage ; then
		dtype=sata
	elif ubifsload ${loadaddr} ${bootdir}/uImage ; then
		dtype=nand
	fi
	echo "detected dtype:$dtype"
fi

echo "Booting from ${dtype}..."
if itest.s "x${dtype}" == "xnand" ; then
	# fix partition name
	#  OpenWrt kernel bug prevents partition name of 'rootfs' from booting
	#  instead name the partition ubi which is what is looked for by
	#  procd sysupgrade
	mtdparts del rootfs && mtdparts add nand0 - ubi
	echo "mtdparts:${mtdparts}"
	setenv fsload ubifsload
	setenv root "ubi0:ubi ubi.mtd=2 rootfstype=squashfs,ubifs"
else
	# for blkdev devices we might have a board that has a nand bootloader
	# and a single-partition blkdev that contains kernel/dt/script in /boot
	# in which case rootpart=1 and rootfstype=${fs} or we could have
	# a linux boot partition containing kernel/dt/script and
	# a 2nd partition with a squashfs rootfs overlay where rootpart=2
	setenv bootpart 1
	# set fsload (used to load kernel/fdt from bootpart)
	setenv fsload "${fs}load ${dtype} ${disk}:${bootpart}"
	# if /sbin/init exists on bootpart assume rootpart=1 else rootpart=2
	if ${fsload} ${loadaddr} sbin/init; then
		setenv rootpart 1
		setenv rootargs "rootfstype=${fs} rootwait rw"
	else
		setenv rootpart 2
		setenv rootargs "rootfstype=squashfs,f2fs rootwait"
	fi
	part uuid ${dtype} ${disk}:${rootpart} uuid
	if test -z "${uuid}"; then
		# fallback to bootdev
		if test -n "$bootdev" ; then
			echo "Using bootdev from env: $bootdev"
		else
			if itest.s "x${dtype}" == "xmmc" ; then
				bootdev=mmcblk0p${rootpart}
			else
				bootdev=sda${rootpart}
			fi
		fi
		setenv root "root=/dev/${bootdev} ${rootargs}"
	else
		setenv root "root=PARTUUID=${uuid} ${rootargs}"
	fi
fi

setenv bootargs "${bootargs}" "${root}" "${video}" "${extra}"
if ${fsload} ${loadaddr} ${bootdir}/uImage; then
	if ${fsload} ${fdt_addr} ${bootdir}/${fdt_file}; then
		echo Loaded DTB from ${bootdir}/${fdt_file}
		test -n "$fixfdt" && run fixfdt
		bootm ${loadaddr} - ${fdt_addr}
	elif ${fsload} ${fdt_addr} ${bootdir}/${fdt_file1}; then
		echo Loaded DTB from ${bootdir}/${fdt_file1}
		test -n "$fixfdt" && run fixfdt
		bootm ${loadaddr} - ${fdt_addr}
	elif ${fsload} ${fdt_addr} ${bootdir}/${fdt_file2}; then
		echo Loaded DTB from ${bootdir}/${fdt_file2}
		test -n "$fixfdt" && run fixfdt
		bootm ${loadaddr} - ${fdt_addr}
	else
		echo "Error loading device-tree"
	fi
else
	echo "Error loading kernel image"
fi
